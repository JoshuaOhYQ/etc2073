{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Artificial Intelligence with Python: Notes &amp; Projects","text":"<p>By Joshua Oh</p> <p>This repository serves as a personal documentation of my notes, learnings, and experiments in Artificial Intelligence (AI) using Python. It covers key concepts, algorithms, and practical implementations in Machine Learning (ML) and other AI techniques.</p> <p>Additionally, I\u2019ve included several hands-on projects developed during my free time, showcasing applications of ML models, neural networks, and other AI approaches. These projects reflect my exploration of real-world problem-solving using Python\u2019s AI / ML ecosystem.</p> <p>Feel free to explore, learn, and contribute!</p> Why Python for AI? <p>Simplicity &amp; Readability  Intuitive syntax that reads like pseudocode  Easy to prototype and experiment  </p> <p>Powerful Ecosystem  300,000+ packages on PyPI  Specialized libraries for every AI task  </p> <p>Community &amp; Support  Largest programming community  Excellent documentation  </p> <p>Cross-Platform  Runs anywhere from Raspberry Pi to cloud clusters  Interoperates with C/C++/Java  </p> <ul> <li> <p> Coding with Python</p> <p>Master Python fundamentals - syntax, data structures, and OOP concepts. The perfect starting point for beginners.</p> <p> Get Started</p> </li> <li> <p> Data Analysis</p> <p>Explore data manipulation, visualization, and statistical analysis using Pandas, Numpy, and Matplotlib.</p> <p> Analyze Data</p> </li> <li> <p> Basic Algorithms</p> <p>Core AI algorithms including search, optimization, and logic programming. Essential for problem-solving.</p> <p> Learn Algorithms</p> </li> <li> <p> Software with Python</p> <p>Build applications, APIs, and tools using Python frameworks like Flask, Django, and PyQt.</p> <p> Develop Software</p> </li> <li> <p> Advanced ML</p> <p>Deep learning, neural networks, and model training with TensorFlow/PyTorch.</p> <p> Explore AI</p> </li> <li> <p> Personal Projects</p> <p>My implemented solutions - from data pipelines to AI applications with full code walkthroughs.</p> <p> View Projects</p> </li> </ul>"},{"location":"Chapter1/","title":"First Order Logic and Expert Systems","text":""},{"location":"Chapter1/#what-is-logic","title":"What is Logic ?!?!","text":"<ul> <li>Logic is a systematic representation of information and knowledge to be communicated to machine.</li> <li>It is expressed using specific syntax of the representation language to define the semantics of the sentences.</li> <li>syntax : identify if an expression is well formed</li> <li>semantics : identify the meaning of an expression</li> </ul>"},{"location":"Chapter1/#logic-languages","title":"Logic Languages","text":"Language What Exists Within the Language (Ontological Commitment) What an agent believes about facts (Epistemological commitment) Propositional logic Facts True/False First order logic Facts, objects, relations True/False Temporal logic Facts, objects, relations, time True/False Probability theory Facts Degree of belief \u2208 [0, 1] Fuzzy logic Facts with degree of truth \u2208 [0, 1] Known interval value"},{"location":"Chapter1/#propositional-logic","title":"Propositional logic","text":""},{"location":"Chapter1/#logical-connective","title":"Logical connective:","text":"Symbol Name Example English equivalent \u2227 conjunction p \u2227 q p and q \u2228 disjunction p \u2228 q p or q \u00ac or \u223c negation \u00acp or \u223cp not p \u21d2 implication p \u21d2 q p implies qif p then q \u27fa biconditional p \u27fa q p if and only if qp equivalent to q <p>Derivative connective such as XOR(Exclusive OR) and NOR(Negation of OR) are also valid and can be formed using the basic logical operators listed above. \ud83d\ude42</p>"},{"location":"Chapter1/#antecedent-and-consequence","title":"Antecedent and consequence:","text":"<ul> <li>Antecedent: The \"IF\" part of a conditional statement</li> <li>Consequent: The \"Then\" part of a conditional statement</li> <li>Example:If r and p then qr \u2227 p \u21d2 qAntecedent (IF) = r \u2227 pConsequent (Then) = q</li> <li>Antecedent and consequence is used to describe components of a conditional statement, often referred to as an implication (only FALSE when antecedent is true and consequent is false, otherwise it is TRUE) \u2757\u2757\u2757</li> </ul>"},{"location":"Chapter1/#syntax","title":"Syntax:","text":"<ul> <li>Syntax is how an expression (statement) can be formed</li> <li>A correctly formed statement has a meaning within the definition of the language</li> <li>In simple words, syntax is the way to write the statements</li> <li>Examples:</li> </ul> Statements Comment p a fact p \u2227 q a conjunction of 2 facts x4y + = not a well-formed expression 3x + y a well-formed arithmetic expression 3x + y &gt; 2 a valid mathematical inequality <ul> <li>Correct syntax : p \u2227 qIncorrect syntax: p \u2227 (incomplete statement)</li> <li>Statements also called sentences in logic</li> </ul>"},{"location":"Chapter1/#semantics","title":"Semantics:","text":"<ul> <li>Semantics defines the meaning of the sentences within the language it is defined in.</li> <li>can be TRUE or FALSE in propositional logic</li> <li>In logic, semantics provides the rules for interpreting the symbols and sentences of a formal language.</li> <li>Examples:</li> </ul> Statements Comment p This is a simple propositional statement. The meaning of p depends on the interpretation assigned to it. p \u2227 q if p is true and q is true This is a conjunction in propositional logic. The statement p \u2227 q means ''both p and q are true'' ( p \u2227 q  is true if and only if both p and q are true. If either p or q is false, the entire statement is false) 3 x + y &gt; 2 if x is 2 and y is 1 This is a mathematical inequality involving variables x and y. The statement is a predicate logic expression. The truth of this statement depends on the values assigned to x and y."},{"location":"Chapter1/#checkpoint-1-conjunction-disjunction-and-negation","title":"CheckPoint 1 \ud83c\udf86\ud83c\udf86 (Conjunction, Disjunction and Negation):","text":"p q p \u2227 q p \u2228 q \u223cp \u223cq false false false false true true true false false true false true false true false true true false true true true true false false"},{"location":"Chapter1/#implications","title":"Implications:","text":"<ul> <li>Let say,  p \u21d2 q p implies q if p (if true) then q (is true)</li> <li>Same with antecedent and consequent, implication is only FALSE when the antecedent (IF) is TRUE and the consequent (THEN) is FALSE, otherwise it is TRUE</li> <li>Example:</li> </ul> p = it rains q = ground is wet p \u21d2 q if it rains, then ground is wet False False True False True True True False False True True True"},{"location":"Chapter1/#biconditional","title":"Biconditional:","text":"<ul> <li>Let say,  p \u27fa q p if and only if q (is true)</li> <li>So, if p is TRUE, then q is TRUE ; q is TRUE, then p is TRUE</li> <li> <p>Basically, p \u27fa q is true only when both p and q have the same truth value (BOTH True or BOTH False):</p> p q p \u21d2 q q \u21d2 p p \u27fa q false false true true true false true true false false true false false true false true true true true true </li> <li> <p>So, how can we prove that the statement p \u27fa q is correct or wrong? We can show that p and q are logically equivalent (p implies q and q implies p), if both implications hold then p \u27fa q is correct, otherwise it is wrong!</p> </li> <li>Example:</li> </ul> p  it rains q  ground is wet p \u21d2 q  if it rains then ground is wet q \u21d2 p  if ground is wet then it rains p \u27fa q false false true true true false true true false false true false false true false true true true true true"},{"location":"Chapter1/#checkpoint-2-implication-and-biconditional","title":"CheckPoint 2 \ud83c\udf86\ud83c\udf86 (Implication and Biconditional):","text":"p  x is divisible by 2 q  x is even p \u21d2 q q \u21d2 p p \u27fa q false false true true true false true true false false true false false true false true true true true true"},{"location":"Chapter1/#first-order-logic-fol","title":"First Order Logic (FOL)","text":"<ul> <li>It is also called predicate logic due to the addition of predicate variables.</li> <li>FOL adds 3 more concepts to the syntax on top of those in propositional logic, there are:   a. Predicate Variables   b. Universal Quantifier \u2200   c. Existential Quantifier \u2203 </li> <li>There are 3 types of symbols in FOL:   a. Constant Symbols for Objects (represent specific, fixed objects in the domain such as names or fixed objects in the domain that do not change).   b. Predicate Symbols for Relations (represent relations or properties that can be true or false about objects in the domain &amp; they also help describe the characteristics of objects or define relationships between them).   c. Function Symbols for Functions (represent mappings from one or more objects to another object; they can take constants, variables, or other functions as arguments and functions return a specific object, unlike predicates which return true or false values).</li> <li>Example of First Order Logic (FOL): </li> </ul> <p>What are the Constant symbols, Predicate symbols, and Function symbols from the image above?</p> <p> Constant Symbols:  - Richard and John (represents 2 specific individuals). - K (represents the crown as a specific object).  </p> <p> Predicate Symbols: - <code>Person(R)</code> -&gt; Richard is a person. (TRUE) - <code>Person(J)</code> -&gt; John is a person. (TRUE) - <code>King(J)</code> -&gt; John is a king. (TRUE) - <code>Brother(R,J)</code> -&gt; Richard is John's brother. (TRUE) - <code>OnHead(K, J)</code> -&gt; The crown (K) is on John's head. (TRUE) - <code>Crown(K)</code> -&gt; K is a crown. (TRUE) </p> <p> Function Symbols: - <code>LeftLeg(R)</code> -&gt; refers to Richard's left leg. - <code>LeftLeg(J)</code> -&gt; refers to John's left leg.  </p>"},{"location":"Chapter1/#predicate-symbols","title":"Predicate symbols","text":"<ul> <li>Predicate symbol represents a property or relation, for instance from the image above, brother, person, king.</li> <li>When we apply arguments to a predicate, it forms a predicate expression, for instance Brother(Richard, John)</li> <li>Predicate expression can be evaluated as either true or false in a given context, for instance Brother(Richard, John) will return true as the statement based on the image above is true.</li> <li>Arity of a predicate helps determine how many objects are involved in the property or relationship it describes:  </li> <li> <p>Unary Relations (Arity = 1) </p> <ul> <li>Takes one argument (property of a single object).  </li> <li>Examples:  </li> <li><code>Person(Richard)</code>: Richard is a person.  </li> <li><code>King(John)</code>: John is a king.  </li> <li><code>Crown(K)</code>: K is a crown.  </li> </ul> </li> <li> <p>Binary Relations (Arity = 2) </p> <ul> <li>Takes two arguments (relationships between 2 objects).  </li> <li>Examples:  </li> <li><code>Brother(Richard, John)</code>: Richard is the brother of John.  </li> <li><code>OnHead(K, John)</code>: Object K is on John's head.  </li> </ul> </li> <li> <p>Higher-Arity Relations </p> <ul> <li>Predicates can also have higher arities.  </li> <li>Example: Ternary relations with arity 3.  </li> <li><code>Between(x, y, z)</code>: Object y is between objects x and z.</li> </ul> </li> <li> <p>Examples (from previous image):</p> </li> </ul> Symbol Arity Example Brother 2 Brother(Richard, John) OnHead 2 OnHead(K, John) Person 1 Person(Richard) King 1 King(John) Crown 1 Crown(K)"},{"location":"Chapter1/#function-symbols","title":"Function symbols","text":"<ul> <li>Represents a mapping from one or more input objects (arguments) to an output object.</li> <li>Unlike predicates (which evaluate to true or false), functions will return objects as their output.</li> <li>In mathematical sense, a function maps an object to another object.</li> <li>Example:  </li> <li><code>LeftLeg(Richard)</code> = Richard's left leg  </li> <li>\u27e8Richard\u27e9 LeftLeg \u27f6 Richard\u2019s left leg  </li> <li>Function symbol <code>LeftLeg</code> is used to map a person (input) to their left leg (output).  </li> </ul> <p>Basically:   - Richard: Input (argument) to the function.   - LeftLeg: Function symbol.   - Richard's left leg: Output (result) of the function.</p> <ul> <li>Concept of arity also applies to function symbols:  </li> <li> <p>Unary function (arity 1): Takes one argument.  </p> <ul> <li>Example: <code>LeftLeg(Richard)</code> \u2192 Refers to Richard's left leg.  </li> </ul> </li> <li> <p>Binary function (arity 2): Takes two arguments.  </p> <ul> <li>Example: <code>Sum(x, y)</code> \u2192 Returns the sum of <code>x</code> and <code>y</code>.  </li> </ul> </li> <li> <p>Higher arities: Functions can also have arities greater than 2.  </p> <ul> <li>Example: A ternary function (arity 3) could be <code>Combine(x, y, z)</code> \u2192 Combines <code>x</code>, <code>y</code>, and <code>z</code> into a single result.</li> </ul> </li> </ul>"},{"location":"Chapter1/#universal-quantifier","title":"Universal quantifier, \u2200","text":"<ul> <li>It means for all or for every.</li> <li>Statement that follows applies to all members of the domain that is being considered.</li> <li>It is used to make general statements about all elements in a domain.</li> <li>Typically written as \u2200x, where x is a variable (expression after \u2200x applied to all possible values of x in the domain)</li> <li>Examples:  </li> <li> <p><code>\u2200x King(x) \u21d2 Person(x)</code> </p> <ul> <li>Translation: For all <code>x</code>, if <code>x</code> is a king, then <code>x</code> is a person.  </li> </ul> </li> <li> <p><code>\u2200x, y Brother(x, y) \u21d2 Person(x) \u2227 Person(y)</code> </p> <ul> <li>Translation: For all <code>x</code> and <code>y</code>, if <code>x</code> is the brother of <code>y</code>, then <code>x</code> is a person and <code>y</code> is a person.</li> </ul> </li> </ul>"},{"location":"Chapter1/#existential-quantifier","title":"Existential quantifier, \u2203","text":"<ul> <li>It means there exists or for some.</li> <li>There exists at least one member of the domain for which the statement that follows is true.</li> <li>It is used to make statements about the existence of at least one element in the domain that satisfies a given condition.</li> <li>Typically written as \u2203x, where x is a variable (expression after \u2203x only holds true for some of x)</li> <li>Examples:  <code>\u2203x Crown(x) \u2227 OnHead(x, John)</code> Translation: There exists an <code>x</code> such that <code>x</code> is a crown and x is on John's head .</li> </ul>"},{"location":"Chapter1/#nested-quantifier","title":"Nested quantifier","text":"<ul> <li>Can involve the same type of quantifier or different types.</li> <li>The order of quantifiers is crucial as it affects the meaning of the statement </li> <li>Examples:  </li> <li> <p><code>\u2200x\u2200y Brother(x, y) \u21d2 Sibling(x, y)</code> <code>\u2200x, y Brother(x, y) \u21d2 Sibling(x, y)</code> </p> <ul> <li>Translation: For all <code>x</code> and <code>y</code>, if <code>x</code> is the brother of <code>y</code>, then <code>x</code> is a sibling of <code>y</code>, basically brothers are siblings. </li> </ul> </li> <li> <p><code>\u2200x\u2200y Loves(x, y)</code> </p> <ul> <li>Translation: For all <code>x</code>, there exists a <code>y</code> such that <code>x</code> loves <code>y</code>, basically everybody loves somebody. </li> </ul> </li> <li> <p><code>\u2200y\u2200x Loves(x, y)</code> </p> <ul> <li>Translation: There exists a <code>y</code> such that for all <code>x</code>, <code>x</code> loves <code>y</code>, basically there is someone who is loved by everyone.</li> </ul> </li> </ul>"},{"location":"Chapter1/#de-morgans-laws","title":"De Morgan's Laws","text":"<ul> <li>Fundamental rules in logic that describe the relationship between conjuntion (\u2227) and disjunction (\u2228) , AND universal (\u2200) and existential (\u2203) quantifier under negation (\u00ac).</li> <li>Allow us to change from \u2227 to \u2228, vice versa AND from \u2200 to \u2203, vice versa. </li> <li>\u2227 and \u2228 :</li> <li> <p><code>\u00ac(P \u2227 Q) \u2261 \u00acP \u2228 \u00acQ</code></p> <ul> <li>Translation: Negation of (<code>P</code> and <code>Q</code>) is equivalent to not <code>P</code> or not <code>Q</code></li> </ul> </li> <li> <p><code>\u00ac(P \u2228 Q) \u2261 \u00acP \u2227 \u00acQ</code> </p> <ul> <li>Translation: Negation of (<code>P</code> or <code>Q</code>) is equivalent to not <code>P</code> and not <code>Q</code></li> </ul> </li> <li> <p><code>P \u2228 Q \u2261 \u00ac(\u00acP \u2227 \u00acQ)</code> </p> <ul> <li>Translation: <code>P</code> or <code>Q</code> is equivalent to not (not <code>P</code> and not <code>Q</code>) </li> </ul> </li> <li> <p><code>P \u2227 Q \u2261 \u00ac(\u00acP \u2228 \u00acQ)</code> </p> <ul> <li>Translation: <code>P</code> and <code>Q</code> is equivalent to not (not <code>P</code> or not <code>Q</code>)</li> </ul> </li> <li> <p>\u2200 and \u2203 :</p> </li> <li> <p><code>\u2200x \u00acP \u2261 \u00ac\u2203x P</code></p> <ul> <li>Translation: For all <code>x</code>, <code>P</code> is not true is equivalent to it is not the case that there exists an <code>x</code> for which P is true</li> </ul> </li> <li> <p><code>\u00ac\u2200x P \u2261 \u2203x \u00acP</code> </p> <ul> <li>Translation: It is not the case that for all <code>x</code>, <code>P</code> is true is equivalent to there exists an <code>x</code> for which <code>P</code> is not true</li> </ul> </li> <li> <p><code>\u2200x P \u2261 \u00ac\u2203x \u00acP</code> </p> <ul> <li>Translation: For all <code>x</code>, <code>P</code> is true is equivalent to there does not exist an <code>x</code> for which <code>P</code> is false.\"</li> </ul> </li> <li> <p><code>\u2203x P \u2261 \u00ac\u2200x \u00acP</code> </p> <ul> <li>Translation: There exists an <code>x</code> such that <code>P</code> is true is equivalent to it is not the case that for all <code>x</code>, <code>P</code> is not true.</li> </ul> </li> </ul>"},{"location":"Chapter1/#expert-systems","title":"Expert Systems","text":"<ul> <li>Programs that mimic decision-making and problem solving thought processes of human experts</li> <li>It uses production rules (IF-THEN) as knowledge representation</li> <li>Structure of expert system: </li> </ul> <ul> <li>Inference methods are methods used by the inference engine to reason through the knowledge base and derive conclusion</li> <li>The two inference methods are forward chaining and backward chaining</li> </ul>"},{"location":"Chapter1/#forward-chaining","title":"Forward Chaining","text":"<ul> <li>Data-driven reasoning</li> <li>known data/facts \u2192 rules \u2192 conclusion</li> <li>Basically, the system begins with the known facts in the working memory, it then apply the rules whose IF conditions match the known facts, when a rule fires, its THEN conclusion is added to the working memory as a new fact. This process repeats until no more rule can be applied or a specific goal has been reached.</li> <li>This method is useful when the goal is to explore all possible conclusions from the avalaible data or to generate a wide range of outcomes (explore all possible conclusions)</li> <li>Rule Interpreter: </li> </ul> <p>How the Algorithm Works:</p> <ol> <li> <p>Start from the first rule    The algorithm begins by checking the first rule in the rule list.</p> </li> <li> <p>Is this rule active?    a) If the rule is \"Active\", move to the next step.    b) If the rule is not \"Active\", proceed to the next rule.</p> </li> <li> <p>Fire the rule    If the rule is active, it is fired (executed).</p> </li> <li> <p>Remove the rule from the list    The fired rule is removed from the list to avoid reprocessing.</p> </li> <li> <p>End of rule list?    a) If all rules have been checked, proceed to the next step.    b) If there are more rules left, continue checking them.</p> </li> <li> <p>Any rule in this cycle was activated?    a) If at least one rule was activated, repeat the process from the first rule.    b) If no rules were activated, the algorithm ends.</p> </li> </ol> <p>Example (Please click this link): </p>"},{"location":"Chapter1/#conflict-resolution","title":"Conflict Resolution","text":"<ul> <li>When multiple rules can be fired at the same time, a conflict resolution strategy determines which rule to execute first.  </li> <li>Priorities are set based on:  </li> </ul> <p>a) Sequence of the rule list   - Assumes rules are arranged according to importance.   - Rules are prioritized based on their order in the list.  </p> <p>b) Specificity of the rule   - More specific rules (rules with more antecedents or conditions) are given higher priority.  </p> <p>c) Parameters in the environment   - Context or external conditions influence which rule is prioritized.   - Ensures the system adapts to real-life situations.  </p> <p>d) Recency of the rule being added   - Recently used rules are considered more significant as they have proven valuable.   - These rules are given priority for faster access.  </p> <p>e) Recency addition of the rule   - New rules are prioritized.  </p> <p>f) Redundancy   - Ignore rules that have already been fired.  </p> <p>Example: Traffic Light Rules Here\u2019s an example of rules and how conflicts might arise:</p> <pre><code>Rule 1    IF    traffic_light is green\n    THEN    action is go\n\nRule 2    IF    traffic_light is amber\n    THEN    action is slow-down\n\nRule 3    IF    traffic_light is amber\n    THEN    action is speed_up\n\nRule 4    IF    traffic_light is red\n    THEN    action is stop \n</code></pre> <p>For this case we will consider parameters in the environment for conflict resolution \u2757\u2757\u2757</p>"},{"location":"Chapter1/#backward-chaining","title":"Backward Chaining","text":"<ul> <li>Goal-driven reasoning</li> <li>goal/hypothesis \u2192 rules \u2192 data to support \u2192 rules \u2192 conclusion</li> <li>Basically, the system starts with a goal, then it looks for rules whose THEN (conclusion) match the goal. It then checks whether the IF conditions of those rules are satisfied by the facts in the working memory. If the conditions are not satisfied, the system treats them as sub-goals and repeats the process.</li> <li>This method is useful when the goal is specific, and the system needs to determine whether it is supported by the avalaible facts or when the system needs to answer a specific question or hypothesis. Basically, veryfying a specific goal or hypothesis.</li> <li>Rule Interpreter: </li> </ul> <p>How the Algorithm Works:</p> <ol> <li> <p>Identify the hypothesis or goal </p> </li> <li> <p>Check if there is a rule that establishes the goal    a) If yes, then proceed    b) If no, then check if the goal is a fact in the database  </p> </li> <li> <p>Check if any rule is active    a) If yes, add sub-goal to the database    b) If no, derive a new sub-goal from the rule's antecedent  </p> </li> <li> <p>Check for any preceding sub-goal    a) If yes, then use the preceding sub-goal as the new sub-goal (System takes the preceding sub-goal and treats it as the new hypothesis/goal to be proven and repeats the process)    b) If no, then the goal is proven </p> </li> </ol> <p>Sub-goal and How it works !?!?!:</p> <pre><code>Goal: Can I conclude Z? \n\nRule: Y \u2227 D \u2192 Z (to prove Z, I must prove Y and D)\n\nNow the new sub-goal is Y \n\nsystem will continue backward chaining to prove Y using another rule\n</code></pre> <p>Example (Please click this link):</p>"},{"location":"Chapter2/","title":"Fuzzy Logic and Fuzzy Inference Systems","text":""},{"location":"Chapter2/#fuzzy-logic-vs-booleanconventional-logic","title":"Fuzzy Logic vs Boolean(Conventional Logic)","text":""},{"location":"Chapter2/#boolean-or-conventional-logic","title":"Boolean or Conventional Logic","text":"<ul> <li>In boolean or conventional logic, a value is defined as the boundary to distinguish 'Tall' and 'Short'</li> <li>For example, <pre><code>Boundary is 180 cm for tall guy. Samuel is 179 cm therefore he is a short guy\n</code></pre></li> <li>In traditional boolean logic, variables may take on only true or false values (1 or 0)</li> </ul> Name Age Occupation John Doe 28 Software Engineer Jane Smith 34 Data Scientist Alice Johnson 22 Student Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Example <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li> <p> I'm an annotation! (1)</p> <ol> <li> I'm an annotation as well!</li> </ol> </li> </ol> <p>Phasellus posuere in sem ut cursus (1)</p> <p>Lorem ipsum dolor sit amet, (2) consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <ol> <li> I'm an annotation!</li> <li> I'm an annotation as well!</li> </ol> Unordered listOrdered list <ul> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ul> <ol> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ol> <p>Example</p> Unordered ListOrdered List <pre><code>* Sed sagittis eleifend rutrum\n* Donec vitae suscipit est\n* Nulla tempor lobortis orci\n</code></pre> <pre><code>1. Sed sagittis eleifend rutrum\n2. Donec vitae suscipit est\n3. Nulla tempor lobortis orci\n</code></pre> <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> <ul> <li> <p> Set up in 5 minutes</p> <p>Install <code>mkdocs-material</code> with <code>pip</code> and get up and running in minutes</p> <p> Getting started</p> </li> <li> <p> It's just Markdown</p> <p>Focus on your content and generate a responsive and searchable static site</p> <p> Reference</p> </li> <li> <p> Made to measure</p> <p>Change the colors, fonts, language, icons, logo and more with a few lines</p> <p> Customization</p> </li> <li> <p> Open Source, MIT</p> <p>Material for MkDocs is licensed under MIT and available on [GitHub]</p> <p> License</p> </li> </ul> <p></p> <ul> <li> Lorem ipsum dolor sit amet, consectetur adipiscing elit</li> <li> Vestibulum convallis sit amet nisi a tincidunt<ul> <li> In hac habitasse platea dictumst</li> <li> In scelerisque nibh non dolor mollis congue sed et metus</li> <li> Praesent sed risus massa</li> </ul> </li> <li> Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque</li> </ul> \\[ \\cos x=\\sum_{k=0}^{\\infty}\\frac{(-1)^k}{(2k)!}x^{2k} \\] <p>The HTML specification is maintained by the W3C.</p>"},{"location":"Python%203/","title":"Python 3","text":"What is this section about? <p>Python 3 is a structured learning program designed to teach the Python programming language (version 3.x), covering fundamental concepts, advanced features, and practical applications.</p>"},{"location":"Python%203/#python-3-course-outline","title":"Python 3 Course Outline","text":"<ul> <li> <p> Python Basics</p> <p>Master syntax, variables, and I/O operations. Perfect starting point for beginners.</p> <p> Learn Basics</p> </li> <li> <p> Control Flow</p> <p>Learn conditionals, loops, and functions - the building blocks of programming logic.</p> <p> Explore Flow Control</p> </li> <li> <p> Data Structures</p> <p>Work with lists, dictionaries, strings, and comprehensions for efficient data handling.</p> <p> Study Structures</p> </li> <li> <p> OOP</p> <p>Understand classes, inheritance, and magic methods for object-oriented design.</p> <p> Master OOP</p> </li> <li> <p> Modules</p> <p>Leverage Python's standard library and install powerful third-party packages.</p> <p> Browse Modules</p> </li> <li> <p> Error Handling</p> <p>Implement robust exception handling and debugging techniques.</p> <p> Handle Errors</p> </li> <li> <p> File Handling</p> <p>Work with files, databases, and different data formats like JSON and CSV.</p> <p> Manage Files</p> </li> <li> <p> Advanced Topics</p> <p>Dive into decorators, concurrency, and web development fundamentals.</p> <p> Level Up</p> </li> </ul>"},{"location":"Python%203/#python-basics","title":"Python Basics","text":""},{"location":"Python%203/#printing","title":"Printing","text":""}]}